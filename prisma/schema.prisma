generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  email        String     @unique
  password     String
  username     String     @unique
  image        String?
  role         UserRole   @default(CASUAL)
  phone        String?    @unique
  refreshToken String?    @unique
  purchases    Purchase[]
  cart         Product[]  @relation("cart")
  wishlist     Product[]  @relation("wishlist")
}

model Product {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  title         String         @unique
  images        String[]       @default([])
  inStockCount  Int            @default(0)
  cost          Float
  slug          String         @unique
  color         String
  storage       Int
  discount      Int?
  modelId       String?        @map("model_id")
  colorCode     String
  model         Model?         @relation(fields: [modelId], references: [id], onDelete: Cascade)
  purchaseItems PurchaseItem[]
  cart          User[]         @relation("cart")
  wishlist      User[]         @relation("wishlist")
}

model Model {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  name              String          @unique
  pixelDensity      Int             @map("pixel_density")
  screenRefreshRate Int             @map("screen_refresh_rate")
  screenDiagonal    Float           @map("screen_diagonal")
  weight            Int
  screenResolution  String          @map("screen_resolution")
  operatingSystem   OperatingSystem @map("operating_system")
  displayType       DisplayType     @map("display_type")
  manufacturerId    String?         @map("manufacturer_id")
  description       String
  manufacturer      Manufacturer?   @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  products          Product[]
}

model Manufacturer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String   @unique
  image     String?
  models    Model[]
}

model Purchase {
  id            String         @id
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  status        PurchaseStatus @default(PENDING)
  userId        String?        @map("user_id")
  user          User?          @relation(fields: [userId], references: [id])
  purchaseItems PurchaseItem[]
}

model PurchaseItem {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  productId  String?   @map("product_id")
  purchaseId String?   @map("purchase_id")
  product    Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchase   Purchase? @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

enum PurchaseStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum UserRole {
  CASUAL
  ADMIN
}

enum OperatingSystem {
  IOS
  ANDROID
}

enum DisplayType {
  TN
  IPS
  OLED
  AMOLED
  SuperAMOLED
}
